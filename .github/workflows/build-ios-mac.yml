name: Build RustDesk iOS and macOS (Unsigned)

on:
  push:
    tags:
      - 'v*'  # 当推送 v 开头的 tag 时自动触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'latest'
      upload_artifact:
        description: 'Upload build artifacts'
        type: boolean
        default: true
      flutter_version:
        description: 'Flutter version'
        default: '3.24.5'
      rust_version:
        description: 'Rust version'
        default: 'stable'

env:
  VCPKG_COMMIT_ID: '2024.10.18'
  MAC_RUST_VERSION: 'stable'

jobs:
  # 设置环境和变量
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set-tag.outputs.tag_name }}
      version: ${{ steps.set-version.outputs.version }}
      upload_artifact: ${{ steps.set-upload.outputs.upload_artifact }}
      flutter_version: ${{ steps.set-flutter.outputs.flutter_version }}
      rust_version: ${{ steps.set-rust.outputs.rust_version }}
    steps:
      - name: Set tag name for push event
        if: github.event_name == 'push'
        id: set-tag-push
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Set tag name for manual trigger
        if: github.event_name == 'workflow_dispatch'
        id: set-tag-manual
        run: echo "tag_name=${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
      
      - name: Set tag name
        id: set-tag
        run: echo "tag_name=${{ steps.set-tag-push.outputs.tag_name || steps.set-tag-manual.outputs.tag_name }}" >> $GITHUB_OUTPUT
      
      - name: Set version
        id: set-version
        run: echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
        env:
          TAG_NAME: ${{ steps.set-tag.outputs.tag_name }}
      
      - name: Set upload artifact flag
        id: set-upload
        run: echo "upload_artifact=${{ github.event_name == 'push' || inputs.upload_artifact }}" >> $GITHUB_OUTPUT
      
      - name: Set Flutter version
        id: set-flutter
        run: echo "flutter_version=${{ inputs.flutter_version || '3.24.5' }}" >> $GITHUB_OUTPUT
      
      - name: Set Rust version
        id: set-rust
        run: echo "rust_version=${{ inputs.rust_version || 'stable' }}" >> $GITHUB_OUTPUT

  # 生成桥接文件
  generate-bridge:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Generate bridge files
        run: |
          echo "Generating bridge files..."
          mkdir -p bridge-artifact
          touch bridge-artifact/bridge.txt
      
      - name: Upload bridge artifact
        uses: actions/upload-artifact@v4
        with:
          name: bridge-artifact
          path: bridge-artifact/
          retention-days: 1

  # 构建 iOS IPA（未签名）
  build-rustdesk-ios:
    name: Build RustDesk iOS IPA (Unsigned)
    runs-on: ${{ matrix.job.os }}
    needs: [setup, generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              arch: aarch64,
              target: aarch64-apple-ios,
              os: macos-13,
              vcpkg-triplet: arm64-ios,
            }
    env:
      FLUTTER_VERSION: ${{ needs.setup.outputs.flutter_version }}
      RUST_VERSION: ${{ needs.setup.outputs.rust_version }}
      VERSION: ${{ needs.setup.outputs.version }}
      TAG_NAME: ${{ needs.setup.outputs.tag_name }}
      UPLOAD_ARTIFACT: ${{ needs.setup.outputs.upload_artifact }}
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies
        run: |
          brew install nasm yasm

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ env.TAG_NAME }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Patch flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == "${{env.FLUTTER_VERSION}}" ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --triplet ${{ matrix.job.vcpkg-triplet }} \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true
        shell: bash

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rustdesk-lib-cache-ios
          key: ${{ matrix.job.target }}

      - name: Restore bridge files
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact
          path: ./

      - name: Build rustdesk lib
        run: |
          rustup target add ${{ matrix.job.target }}
          cargo build --features flutter,hwcodec --release --target aarch64-apple-ios --lib

      - name: Build rustdesk IPA (Unsigned)
        shell: bash
        run: |
          pushd flutter
          # 构建未签名的 IPA
          flutter build ipa --release --no-codesign
          popd

      - name: Upload Unsigned IPA Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-ios-unsigned-${{ env.VERSION }}-${{ matrix.job.arch }}
          path: flutter/build/ios/ipa/*.ipa
          retention-days: 30

      - name: Publish Unsigned IPA to Release
        if: env.UPLOAD_ARTIFACT == 'true' && startsWith(env.TAG_NAME, 'v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: flutter/build/ios/ipa/*.ipa
          draft: false
          prerelease: false

  # 构建 macOS 应用（未签名）
  build-for-macOS:
    name: Build macOS (Unsigned) - ${{ matrix.job.arch }}
    runs-on: ${{ matrix.job.os }}
    needs: [setup, generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-apple-darwin,
              os: macos-13,
              extra-build-args: "",
              arch: x86_64,
              vcpkg-triplet: x64-osx,
            }
          - {
              target: aarch64-apple-darwin,
              os: macos-14,
              extra-build-args: "--screencapturekit",
              arch: aarch64,
              vcpkg-triplet: arm64-osx,
            }
    env:
      FLUTTER_VERSION: ${{ needs.setup.outputs.flutter_version }}
      MAC_RUST_VERSION: ${{ needs.setup.outputs.rust_version }}
      VERSION: ${{ needs.setup.outputs.version }}
      TAG_NAME: ${{ needs.setup.outputs.tag_name }}
      UPLOAD_ARTIFACT: ${{ needs.setup.outputs.upload_artifact }}
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ env.TAG_NAME }}

      - name: Install build runtime
        run: |
          brew install llvm create-dmg nasm
          if command -v pkg-config &>/dev/null; then
              echo "pkg-config is already installed"
          else
              brew install pkg-config
          fi

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Patch flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == "${{env.FLUTTER_VERSION}}" ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Workaround for flutter issue
        shell: bash
        run: |
          cd "$(dirname "$(which flutter)")"
          sed -i -e 's/_setFramesEnabledState(false);/\/\/_setFramesEnabledState(false);/g' ../packages/flutter/lib/src/scheduler/binding.dart
          grep -n '_setFramesEnabledState(false);' ../packages/flutter/lib/src/scheduler/binding.dart

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.MAC_RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Restore bridge files
        uses: actions/download-artifact@v4
        with:
          name: bridge-artifact
          path: ./

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true

      - name: Show version information
        shell: bash
        run: |
          clang --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build rustdesk (Unsigned)
        run: |
          if [ "${{ matrix.job.target }}" = "aarch64-apple-darwin" ]; then
            MIN_MACOS_VERSION="12.3"
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET\=[0-9]*.[0-9]*/MACOSX_DEPLOYMENT_TARGET=${MIN_MACOS_VERSION}/" build.py
            sed -i -e "s/platform :osx, '.*'/platform :osx, '${MIN_MACOS_VERSION}'/" flutter/macos/Podfile
            sed -i -e "s/osx_minimum_system_version = \"[0-9]*.[0-9]*\"/osx_minimum_system_version = \"${MIN_MACOS_VERSION}\"/" Cargo.toml
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET = [0-9]*.[0-9]*;/MACOSX_DEPLOYMENT_TARGET = ${MIN_MACOS_VERSION};/" flutter/macos/Runner.xcodeproj/project.pbxproj
          fi
          ./build.py --flutter --hwcodec --unix-file-copy-paste ${{ matrix.job.extra-build-args }}

      - name: Create Unsigned DMG
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          CREATE_DMG="$(command -v create-dmg)"
          CREATE_DMG="$(readlink -f "$CREATE_DMG")"
          sed -i -e 's/MAXIMUM_UNMOUNTING_ATTEMPTS=3/MAXIMUM_UNMOUNTING_ATTEMPTS=7/' "$CREATE_DMG"
          create-dmg --icon "RustDesk.app" 200 190 --hide-extension "RustDesk.app" --window-size 800 400 --app-drop-link 600 185 rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-unsigned.dmg ./flutter/build/macos/Build/Products/Release/RustDesk.app

      - name: Upload Unsigned macOS DMG
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-macos-unsigned-${{ env.VERSION }}-${{ matrix.job.arch }}
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-unsigned.dmg
          retention-days: 30

      - name: Publish Unsigned DMG to Release
        if: env.UPLOAD_ARTIFACT == 'true' && startsWith(env.TAG_NAME, 'v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: rustdesk-*-${{ matrix.job.arch }}-unsigned.dmg
          draft: false
          prerelease: false

      - name: Create App Archive (Optional)
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          # 可选：创建未签名的 .app 归档，方便用户手动安装
          cd ./flutter/build/macos/Build/Products/Release
          zip -r rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-unsigned.app.zip RustDesk.app
          cd ${{ github.workspace }}

      - name: Upload Unsigned App Archive
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-macos-app-unsigned-${{ env.VERSION }}-${{ matrix.job.arch }}
          path: flutter/build/macos/Build/Products/Release/rustdesk-*-unsigned.app.zip
          retention-days: 30

      - name: Publish Unsigned App Archive to Release
        if: env.UPLOAD_ARTIFACT == 'true' && startsWith(env.TAG_NAME, 'v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: flutter/build/macos/Build/Products/Release/rustdesk-*-unsigned.app.zip
          draft: false
          prerelease: false

  # 汇总和通知
  summary:
    runs-on: ubuntu-latest
    needs: [build-rustdesk-ios, build-for-macOS]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "=== Unsigned Build Summary ==="
          echo "Build completed for tag: ${{ needs.setup.outputs.tag_name }}"
          echo "Version: ${{ needs.setup.outputs.version }}"
          echo ""
          echo "Build Results:"
          echo "iOS IPA (Unsigned): ${{ needs.build-rustdesk-ios.result }}"
          echo "macOS x86_64 DMG (Unsigned): ${{ needs.build-for-macOS.result }}"
          echo "macOS aarch64 DMG (Unsigned): ${{ needs.build-for-macOS.result }}"
          echo ""
          echo "All artifacts are unsigned and require manual signing for distribution."
